} else {
location == 'side'
}
} else if (rand >= 4 && rand < 6){
distance_e <- distance_e
if (distance_e == 1){
location <- 'corner'
} else {
location <- 'side'
}
} else {
distance_e <- distance_e - 1
location <- 'corner'
}
} else {
rand <- sample(1:6, 1)
if (rand < 3){
distance_e <- distance_e + 1
location <- 'side'
} else if (rand >= 3 && rand < 5){
randl <- sample(1:distance_e-1, 1)
distance_e <- distance_e
if (randl == 1){
location <- 'corner'
} else {
location <- 'side'
}
} else {
randb <- sample(1:distance_e-1, 1)
distance_e <- distance_e - 1
if (randb == 1){
location <- 'corner'
} else {
location <- 'side'
}
}
}
count_e <- count_e + 1
}
result <- append(result, distance_e)
while (count_e < steps){
if (distance_e == 0){
distance_e <- distance_e + 1
location <- 'corner'
} else if (location == 'corner') {
rand <- sample(1:6, 1)
if (rand < 4){
distance_e <- distance_e + 1
randf <- sample(1:3, 1)
if (randf == 1){
location == 'corner'
} else {
location == 'side'
}
} else if (rand >= 4 && rand < 6){
distance_e <- distance_e
if (distance_e == 1){
location <- 'corner'
} else {
location <- 'side'
}
} else {
distance_e <- distance_e - 1
location <- 'corner'
}
} else {
rand <- sample(1:6, 1)
if (rand < 3){
distance_e <- distance_e + 1
location <- 'side'
} else if (rand >= 3 && rand < 5){
randl <- sample(1:distance_e-1, 1)
distance_e <- distance_e
if (randl == 1){
location <- 'corner'
} else {
location <- 'side'
}
} else {
randb <- sample(1:distance_e-1, 1)
distance_e <- distance_e - 1
if (randb == 1){
location <- 'corner'
} else {
location <- 'side'
}
}
}
count_e <- count_e + 1
}
result <- append(result, distance_e)
result <- c()
count_e <- 0
while (count_e < steps){
if (distance_e == 0){
distance_e <- distance_e + 1
location <- 'corner'
} else if (location == 'corner') {
rand <- sample(1:6, 1)
if (rand < 4){
distance_e <- distance_e + 1
randf <- sample(1:3, 1)
if (randf == 1){
location == 'corner'
} else {
location == 'side'
}
} else if (rand >= 4 && rand < 6){
distance_e <- distance_e
if (distance_e == 1){
location <- 'corner'
} else {
location <- 'side'
}
} else {
distance_e <- distance_e - 1
location <- 'corner'
}
} else {
rand <- sample(1:6, 1)
if (rand < 3){
distance_e <- distance_e + 1
location <- 'side'
} else if (rand >= 3 && rand < 5){
randl <- sample(1:distance_e-1, 1)
distance_e <- distance_e
if (randl == 1){
location <- 'corner'
} else {
location <- 'side'
}
} else {
randb <- sample(1:distance_e-1, 1)
distance_e <- distance_e - 1
if (randb == 1){
location <- 'corner'
} else {
location <- 'side'
}
}
}
count_e <- count_e + 1
}
while (count_e < steps){
if (distance_e == 0){
distance_e <- distance_e + 1
location <- 'corner'
} else if (location == 'corner') {
rand <- sample(1:6, 1)
if (rand < 4){
distance_e <- distance_e + 1
randf <- sample(1:3, 1)
if (randf == 1){
location == 'corner'
} else {
location == 'side'
}
} else if (rand >= 4 && rand < 6){
distance_e <- distance_e
if (distance_e == 1){
location <- 'corner'
} else {
location <- 'side'
}
} else {
distance_e <- distance_e - 1
location <- 'corner'
}
} else {
rand <- sample(1:6, 1)
if (rand < 3){
distance_e <- distance_e + 1
location <- 'side'
} else if (rand >= 3 && rand < 5){
randl <- sample(1:distance_e-1, 1)
distance_e <- distance_e
if (randl == 1){
location <- 'corner'
} else {
location <- 'side'
}
} else {
randb <- sample(1:distance_e-1, 1)
distance_e <- distance_e - 1
if (randb == 1){
location <- 'corner'
} else {
location <- 'side'
}
}
}
count_e <- count_e + 1
}
while (count_e < steps){
if (distance_e == 0){
distance_e <- distance_e + 1
location <- 'corner'
} else if (location == 'corner') {
rand <- sample(1:6, 1)
if (rand < 4){
distance_e <- distance_e + 1
randf <- sample(1:3, 1)
if (randf == 1){
location == 'corner'
} else {
location == 'side'
}
} else if (rand >= 4 && rand < 6){
distance_e <- distance_e
if (distance_e == 1){
location <- 'corner'
} else {
location <- 'side'
}
} else {
distance_e <- distance_e - 1
location <- 'corner'
}
} else {
rand <- sample(1:6, 1)
if (rand < 3){
distance_e <- distance_e + 1
location <- 'side'
} else if (rand >= 3 && rand < 5){
randl <- sample(1:distance_e-1, 1)
distance_e <- distance_e
if (randl == 1){
location <- 'corner'
} else {
location <- 'side'
}
} else {
randb <- sample(1:distance_e-1, 1)
distance_e <- distance_e - 1
if (randb == 1){
location <- 'corner'
} else {
location <- 'side'
}
}
}
count_e <- count_e + 1
}
while (count_e < steps){
if (distance_e == 0){
distance_e <- distance_e + 1
location <- 'corner'
} else if (location == 'corner') {
rand <- sample(1:6, 1)
if (rand < 4){
distance_e <- distance_e + 1
randf <- sample(1:3, 1)
if (randf == 1){
location == 'corner'
} else {
location == 'side'
}
} else if (rand >= 4 && rand < 6){
distance_e <- distance_e
if (distance_e == 1){
location <- 'corner'
} else {
location <- 'side'
}
} else {
distance_e <- distance_e - 1
location <- 'corner'
}
} else {
rand <- sample(1:6, 1)
if (rand < 3){
distance_e <- distance_e + 1
location <- 'side'
} else if (rand >= 3 && rand < 5){
randl <- sample(1:distance_e-1, 1)
distance_e <- distance_e
if (randl == 1){
location <- 'corner'
} else {
location <- 'side'
}
} else {
randb <- sample(1:distance_e-1, 1)
distance_e <- distance_e - 1
if (randb == 1){
location <- 'corner'
} else {
location <- 'side'
}
}
}
count_e <- count_e + 1
}
source('C:/Users/Steve/Google Drive/Education/Data_Science/Data_Incubator/Challenge/Challenge_1_1.R')
source('C:/Users/Steve/Google Drive/Education/Data_Science/Data_Incubator/Challenge/Challenge_1_1.R')
source('C:/Users/Steve/Google Drive/Education/Data_Science/Data_Incubator/Challenge/Challenge_1_1.R')
hist(result)
source('C:/Users/Steve/Google Drive/Education/Data_Science/Data_Incubator/Challenge/Challenge_1_1.R')
source('C:/Users/Steve/Google Drive/Education/Data_Science/Data_Incubator/Challenge/Challenge_1_1.R')
source('C:/Users/Steve/Google Drive/Education/Data_Science/Data_Incubator/Challenge/Challenge_1_1.R')
source('C:/Users/Steve/Google Drive/Education/Data_Science/Data_Incubator/Challenge/Challenge_1_1.R')
source('C:/Users/Steve/Google Drive/Education/Data_Science/Data_Incubator/Challenge/Challenge_1_1.R')
source('C:/Users/Steve/Google Drive/Education/Data_Science/Data_Incubator/Challenge/Challenge_1_1.R')
source('C:/Users/Steve/Google Drive/Education/Data_Science/Data_Incubator/Challenge/Challenge_1_1.R')
source('C:/Users/Steve/Google Drive/Education/Data_Science/Data_Incubator/Challenge/Challenge_1_1.R')
source('C:/Users/Steve/Google Drive/Education/Data_Science/Data_Incubator/Challenge/Challenge_1_1.R')
source('C:/Users/Steve/Google Drive/Education/Data_Science/Data_Incubator/Challenge/Challenge_1_1.R')
source('C:/Users/Steve/Google Drive/Education/Data_Science/Data_Incubator/Challenge/Challenge_1_1.R')
source('C:/Users/Steve/Google Drive/Education/Data_Science/Data_Incubator/Challenge/Challenge_1_1.R')
source('C:/Users/Steve/Google Drive/Education/Data_Science/Data_Incubator/Challenge/Challenge_1_1.R')
source('C:/Users/Steve/Google Drive/Education/Data_Science/Data_Incubator/Challenge/Challenge_1_1.R')
source('C:/Users/Steve/Google Drive/Education/Data_Science/Data_Incubator/Challenge/Challenge_1_1.R')
source('C:/Users/Steve/Google Drive/Education/Data_Science/Data_Incubator/Challenge/Challenge_1_2.R')
source('C:/Users/Steve/Google Drive/Education/Data_Science/Data_Incubator/Challenge/Challenge_1_3.R')
library(readr)
library(dplyr)
# Load data sets
pydemo <- read_csv('Physician_Compare_National_Downloadable_File.csv')
perfbyclin <- read_csv('Physician_Compare_2015_Individual_EP_Public_Reporting___Performance_Scores.csv')
pqrsperfbygroup <- read_csv('Physician_Compare_2015_Group_Public_Reporting___Performance_Scores.csv')
cahpsperfbygroup <- read_csv('Physician_Compare_2015_Group_Public_Reporting_-_Patient_Experience.csv')
pydemo$NPI <- as.character(pydemo$NPI)
colnames(pydemo)[2] <- 'PAC_ID'
colnames(pydemo)[11] <- 'Graduation_year'
colnames(pqrsperfbygroup)[2] <- 'Group_PAC_ID'
colnames(cahpsperfbygroup)[2] <- 'Group_PAC_ID'
colnames(perfbyclin)[8] <- 'Measure_Performance_Rate'
# Count distinct NPI & PAC_ID pairs; check for equality
ind_NPI <- n_distinct(pydemo['NPI'])
ind_PAC <- n_distinct(pydemo['PAC_ID'])
ind_NPI == ind_PAC
library(readr)
library(dplyr)
# Load data sets
pydemo <- read_csv('Physician_Compare_National_Downloadable_File.csv')
perfbyclin <- read_csv('Physician_Compare_2015_Individual_EP_Public_Reporting___Performance_Scores.csv')
pqrsperfbygroup <- read_csv('Physician_Compare_2015_Group_Public_Reporting___Performance_Scores.csv')
cahpsperfbygroup <- read_csv('Physician_Compare_2015_Group_Public_Reporting_-_Patient_Experience.csv')
pydemo$NPI <- as.character(pydemo$NPI)
colnames(pydemo)[2] <- 'PAC_ID'
colnames(pydemo)[11] <- 'Graduation_year'
colnames(pqrsperfbygroup)[2] <- 'Group_PAC_ID'
colnames(cahpsperfbygroup)[2] <- 'Group_PAC_ID'
colnames(perfbyclin)[8] <- 'Measure_Performance_Rate'
# Count distinct NPI & PAC_ID pairs; check for equality
ind_NPI <- n_distinct(pydemo['NPI'])
ind_PAC <- n_distinct(pydemo['PAC_ID'])
ind_NPI == ind_PAC
library(readr)
library(dplyr)
# Load data sets
pydemo <- read_csv('Physician_Compare_National_Downloadable_File.csv')
perfbyclin <- read_csv('Physician_Compare_2015_Individual_EP_Public_Reporting___Performance_Scores.csv')
pqrsperfbygroup <- read_csv('Physician_Compare_2015_Group_Public_Reporting___Performance_Scores.csv')
cahpsperfbygroup <- read_csv('Physician_Compare_2015_Group_Public_Reporting_-_Patient_Experience.csv')
pydemo$NPI <- as.character(pydemo$NPI)
colnames(pydemo)[2] <- 'PAC_ID'
colnames(pydemo)[11] <- 'Graduation_year'
colnames(pqrsperfbygroup)[2] <- 'Group_PAC_ID'
colnames(cahpsperfbygroup)[2] <- 'Group_PAC_ID'
colnames(perfbyclin)[8] <- 'Measure_Performance_Rate'
# Count distinct NPI & PAC_ID pairs; check for equality
ind_NPI <- n_distinct(pydemo['NPI'])
ind_PAC <- n_distinct(pydemo['PAC_ID'])
ind_NPI == ind_PAC
library(readr)
library(dplyr)
# Load data sets
pydemo <- read_csv('Physician_Compare_National_Downloadable_File.csv')
perfbyclin <- read_csv('Physician_Compare_2015_Individual_EP_Public_Reporting___Performance_Scores.csv')
pqrsperfbygroup <- read_csv('Physician_Compare_2015_Group_Public_Reporting___Performance_Scores.csv')
cahpsperfbygroup <- read_csv('Physician_Compare_2015_Group_Public_Reporting_-_Patient_Experience.csv')
pydemo$NPI <- as.character(pydemo$NPI)
colnames(pydemo)[2] <- 'PAC_ID'
colnames(pydemo)[11] <- 'Graduation_year'
colnames(pqrsperfbygroup)[2] <- 'Group_PAC_ID'
colnames(cahpsperfbygroup)[2] <- 'Group_PAC_ID'
colnames(perfbyclin)[8] <- 'Measure_Performance_Rate'
# Count distinct NPI & PAC_ID pairs; check for equality
ind_NPI <- n_distinct(pydemo['NPI'])
ind_PAC <- n_distinct(pydemo['PAC_ID'])
ind_NPI == ind_PAC
setwd("C:/Users/Steve/Home/git/sandbox/Challenge")
library(readr)
library(dplyr)
# Load data sets
pydemo <- read_csv('Physician_Compare_National_Downloadable_File.csv')
perfbyclin <- read_csv('Physician_Compare_2015_Individual_EP_Public_Reporting___Performance_Scores.csv')
pqrsperfbygroup <- read_csv('Physician_Compare_2015_Group_Public_Reporting___Performance_Scores.csv')
cahpsperfbygroup <- read_csv('Physician_Compare_2015_Group_Public_Reporting_-_Patient_Experience.csv')
pydemo$NPI <- as.character(pydemo$NPI)
colnames(pydemo)[2] <- 'PAC_ID'
colnames(pydemo)[11] <- 'Graduation_year'
colnames(pqrsperfbygroup)[2] <- 'Group_PAC_ID'
colnames(cahpsperfbygroup)[2] <- 'Group_PAC_ID'
colnames(perfbyclin)[8] <- 'Measure_Performance_Rate'
# Count distinct NPI & PAC_ID pairs; check for equality
ind_NPI <- n_distinct(pydemo['NPI'])
ind_PAC <- n_distinct(pydemo['PAC_ID'])
ind_NPI == ind_PAC
# Create a list of just NPI & PAC_IDs
clinicians <- select(pydemo, NPI, PAC_ID)
# Filter for only unique combinations
distinct_clinicians <- distinct(clinicians)
# Look for duplicate NPIs
duplicate_NPI <- distinct_clinicians %>% group_by(NPI) %>% filter(n()>1)
duplicate_NPI_list <- distinct(ungroup(duplicate_NPI['NPI']))
pydemo_errors <- semi_join(pydemo, duplicate_NPI_list, by='NPI') %>% select(1:8) %>% print(n=23)
# Look for duplicate PAC_IDs; none found
duplicate_PAC <- distinct_clinicians %>% group_by(PAC_ID) %>% filter(n()>1)
# Create a list of unique NPIs
unique_clinicians <- select(pydemo, NPI, Gender, Credential) %>% distinct()
# Calculate ratio male to female clinicians
MF_ratio <- sum(unique_clinicians['Gender'] == 'M') / sum(unique_clinicians['Gender'] == 'F')
sum(unique_clinicians['Gender'] == 'M')
sum(unique_clinicians['Gender'] == 'F')
sum(578090, 492304)
sum(is.na(unique_clinicians['Gender']))
table(unique_clinicians['Gender'])
clinicians_cred <-  pydemo %>% select(NPI, Credential, Gender)
clinicians_cred <-  pydemo %>% select(NPI, Credential, Gender) %>% filter(!is.na(pydemo$Credential))
clinicians_cred <-  pydemo %>% select(NPI, Credential, Gender) %>% filter(!is.na(pydemo$Credential)) %>% distinct()
clinicians_cred %>% group_by(Credential)
clinicians_cred %>% group_by(Credential) %>% summarise(FM_ratio = sum(Gender == 'F') / sum(Gender == 'M'))
clinicians_cred %>% group_by(Credential) %>% summarise(FM_ratio = sum(Gender == 'F') / sum(Gender == 'M')) %>% arrange(desc(FM_ratio))
filter(pydemo, Credential == "SCW")
NPI_exp <- filter(pydemo, Credential == "SCW")
View(NPI_exp)
View(NPI_exp)
filter(pydemo, NPI == "1588892012")
# Sum healthcare facilities by state
pqrsperfbygroup %>% bind_rows(cahpsperfbygroup) %>% select(1:3) %>% distinct() %>% group_by(State) %>% summarise(State_total = sum(!is.na(State))) %>% arrange(State_total)
group_check <- pqrsperfbygroup %>% bind_rows(cahpsperfbygroup)
View(group_check)
View(group_check)
group_check <- pqrsperfbygroup %>% bind_rows(cahpsperfbygroup) %>% select(1:3) %>% distinct()
View(group_check)
perf_meas <- perfbyclin %>% group_by(NPI)
View(perf_meas)
perf_meas <- perfbyclin %>% group_by(NPI) %>% summarise(Total_rates = sum(!is.na(Measure_Performance_Rate)), Avg_Perf = mean(Measure_Performance_Rate))
perf_meas <- perfbyclin %>% group_by(NPI) %>% summarise(Total_rates = sum(!is.na(Measure_Performance_Rate)), Avg_Perf = mean(Measure_Performance_Rate)) %>% filter(Total_rates >= 10)
perf_meas_sd <- sd(perf_meas$Avg_Perf)
sd(perf_meas$Avg_Perf)
grad_years <- perf_meas %>% left_join(pydemo, by='NPI')
perf_meas$NPI <- as.character(perf_meas$NPI)
grad_years <- perf_meas %>% left_join(pydemo, by='NPI')
View(grad_years)
View(grad_years) %>% select(NPI, Avg_Perf, Graduation_year)
grad_years <- perf_meas %>% left_join(pydemo, by='NPI') %>% select(NPI, Avg_Perf, Graduation_year)
grad_years <- perf_meas %>% left_join(pydemo, by='NPI') %>% select(NPI, Avg_Perf, Graduation_year) %>% filter(Graduation_year >= 1973 & Graduation_year <= 2003)
grad_years <- perf_meas %>% left_join(pydemo, by='NPI') %>% select(NPI, Avg_Perf, Graduation_year) %>% filter(Graduation_year >= 1973 & Graduation_year <= 2003)  %>% distinct()
grad_years <- perf_meas %>% left_join(pydemo, by='NPI') %>% select(NPI, Avg_Perf, Graduation_year) %>% filter(Graduation_year >= 1973 & Graduation_year <= 2003)  %>% distinct() %>% group_by(Graduation_year)
grad_years <- perf_meas %>% left_join(pydemo, by='NPI') %>% select(NPI, Avg_Perf, Graduation_year) %>% filter(Graduation_year >= 1973 & Graduation_year <= 2003)  %>% distinct() %>% group_by(Graduation_year) %>% summarise(Avg_Perf_year = mean(Avg_Perf))
fit = lm(grad_years$Avg_Perf_year ~ grad_years$Graduation_year)
summary(fit)
View(fit)
options(digits=10)
View(fit)
fit = lm(grad_years$Avg_Perf_year ~ grad_years$Graduation_year)
summary(fit)
options(digits=15)
fit = lm(grad_years$Avg_Perf_year ~ grad_years$Graduation_year)
summary(fit)
perf_creds <- perf_meas %>% left_join(pydemo, by='NPI') %>% select(NPI, Avg_Perf, Credential)
View(perf_creds)
View(perf_creds)
perf_creds <- perf_meas %>% left_join(pydemo, by='NPI') %>% select(NPI, Avg_Perf, Credential) %>% distinct()
View(clinicians_cred)
View(pqrsperfbygroup)
View(pqrsperfbygroup)
View(perfbyclin)
perf_creds <- perf_meas %>% left_join(pydemo, by='NPI') %>% select(NPI, Avg_Perf, Credential) %>% distinct() %>% filter(Credential == 'MD' | Credential == 'NP')
perf_creds <- perf_meas %>% left_join(pydemo, by='NPI') %>% select(NPI, Avg_Perf, Credential) %>% distinct() %>% filter(Credential == 'MD' | Credential == 'NP')  %>% group_by(Credential) %>% summarise(Avg_Perf_cred = mean(Avg_Perf))
Avg_perf_diff <- perf_creds$Avg_Perf_total[1] - perf_creds$Avg_Perf_total[2]
View(pydemo)
perf_creds$Avg_Perf_total[1]
Avg_perf_diff <- perf_creds$Avg_Perf_cred[1] - perf_creds$Avg_Perf_cred[2]
perf_creds
perf_creds <- perf_meas %>% left_join(pydemo, by='NPI') %>% select(NPI, Avg_Perf, Credential) %>% distinct() %>% filter(Credential == 'MD' | Credential == 'NP') %>% group_by(Credential) %>% summarise(Avg_Perf_cred = mean(Avg_Perf))
perf_creds
perf_creds$Avg_Perf_cred1] - perf_creds$Avg_Perf_cred[2]
perf_creds$Avg_Perf_cred[1] - perf_creds$Avg_Perf_cred[2]
perf_creds_MD <- perf_meas %>% left_join(pydemo, by='NPI') %>% select(NPI, Avg_Perf, Credential) %>% distinct() %>% filter(Credential == 'MD')
perf_creds_NP <- perf_meas %>% left_join(pydemo, by='NPI') %>% select(NPI, Avg_Perf, Credential) %>% distinct() %>% filter(Credential == 'NP')
View(perf_creds_MD)
View(perf_creds_MD)
View(perf_creds_NP)
View(perf_creds_NP)
t.test(perf_creds_MD$Avg_Perf, perf_creds_NP$Avg_Perf)
0.0000363796
library(readr)
library(dplyr)
# Load data sets
pydemo <- read_csv('Physician_Compare_National_Downloadable_File.csv')
perfbyclin <- read_csv('Physician_Compare_2015_Individual_EP_Public_Reporting___Performance_Scores.csv')
pqrsperfbygroup <- read_csv('Physician_Compare_2015_Group_Public_Reporting___Performance_Scores.csv')
cahpsperfbygroup <- read_csv('Physician_Compare_2015_Group_Public_Reporting_-_Patient_Experience.csv')
View(perfbyclin)
colnames(pydemo)[3] <- 'Last_name'
View(perfbyclin)
View(pydemo)
colnames(pydemo)[4] <- 'Last_name'
colnames(pydemo)[3] <- 'col3'
filter(pydemo, Last_name == 'GUARDINO')
Joe_G <- filter(pydemo, Last_name == 'GUARDINO')
View(Joe_G)
colnames(pydemo)[5] <- 'First_name'
Joe_G <- filter(pydemo, Last_name == 'GUARDINO', First_name == 'JOSEPH')
View(perfbyclin)
Joe_perf <- filter(perfbyclin, NPI == 1295746667)
View(Joe_perf)
Joe_perf <- filter(perfbyclin, NPI == '1295746667')
